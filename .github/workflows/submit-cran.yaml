name: CRAN Submission

on:
  workflow_dispatch: {}
  push:
    branches: [main, master]
  release:
    types: [prereleased]

jobs:
  cran-submission:
    runs-on: ubuntu-latest
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes

    steps:
      - uses: actions/checkout@v4

      - name: Set up R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'

      - name: Install dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: any::rcmdcheck, any::desc
          needs: check

      - name: Check package
        uses: r-lib/actions/check-r-package@v2
        id: checkrpkg
        with:
          upload-snapshots: true
          error-on: "'warning'"  # Fail if there are any warnings

      - name: Extract package information
        id: pkg-info
        shell: Rscript {0}
        run: |
          # Read the DESCRIPTION file
          d <- desc::desc()

          # Extract package name, version and maintainer
          pkgname <- d$get("Package")
          version <- d$get("Version")

          # Get the maintainer field and extract email
          maintainer <- d$get_maintainer()
          maintainer_name <- sub("\\s*<.*>", "", maintainer)

          # Extract the email using desc's built-in function
          maintainer_email <- if(length(maintainer) == 1) {
            email_match <- regexpr("<[^>]+>|[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}", maintainer)
            if(email_match > 0) {
              email <- regmatches(maintainer, email_match)
              gsub("[<>]", "", email)
            } else {
              stop("Could not extract maintainer email from DESCRIPTION")
            }
          } else {
              stop("Multiple maintainers are listed in DESCRIPTION; unable to extract.")
          }

          # Write to environment for later steps
          cat(sprintf("PKGNAME=%s\n", pkgname), file = Sys.getenv("GITHUB_ENV"), append = TRUE)
          cat(sprintf("VERSION=%s\n", version), file = Sys.getenv("GITHUB_ENV"), append = TRUE)
          cat(sprintf("MAINTAINER_NAME=%s\n", maintainer_name), file = Sys.getenv("GITHUB_ENV"), append = TRUE)
          cat(sprintf("MAINTAINER_EMAIL=%s\n", maintainer_email), file = Sys.getenv("GITHUB_ENV"), append = TRUE)

          cat("Package:", pkgname, "\n")
          cat("Version:", version, "\n")
          cat("Maintainer:", maintainer_name, "\n")
          cat("Maintainer email:", maintainer_email, "\n")

          # Create a GitHub output for use in other steps
          cat(sprintf("pkg_file=%s_%s.tar.gz\n", pkgname, version),
              file = Sys.getenv("GITHUB_ENV"), append = TRUE)

      - name: Locate package tarball
        id: locate-tarball
        shell: bash
        run: |
          # The package tarball from r-lib/actions/check-r-package@v2
          CHECK_DIR="check"

          # Try to find the tarball
          PKG_TARBALL=$(find "${CHECK_DIR}" -name "${PKGNAME}_${VERSION}.tar.gz" -print -quit)

          # If not found in check_dir, check the parent directory
          if [ -z "$PKG_TARBALL" ]; then
            PKG_TARBALL=$(find . -maxdepth 2 -name "${PKGNAME}_${VERSION}.tar.gz" -print -quit)
          fi

          if [ -z "$PKG_TARBALL" ]; then
            echo "Could not find package tarball"
            echo "Check directory contents:"
            find "${CHECK_DIR}" -type f | sort
            exit 1
          fi

          echo "Found package tarball: $PKG_TARBALL"
          echo "PKG_TARBALL=$PKG_TARBALL" >> $GITHUB_ENV
          echo "tarball_path=$PKG_TARBALL" >> $GITHUB_OUTPUT

          # Copy to a predictable location
          mkdir -p artifacts
          cp "$PKG_TARBALL" "artifacts/${PKGNAME}_${VERSION}.tar.gz"
          echo "SUBMISSION_PKG=artifacts/${PKGNAME}_${VERSION}.tar.gz" >> $GITHUB_ENV

      - name: Check for cran-comments.md
        id: check-comments
        shell: bash
        run: |
          if [ -f "cran-comments.md" ]; then
            echo "HAS_COMMENTS=true" >> $GITHUB_ENV
          else
            echo "HAS_COMMENTS=false" >> $GITHUB_ENV
            echo "cran-comments.md not found, will create a basic one"
          fi

      - name: Create default cran-comments if none exists
        if: env.HAS_COMMENTS == 'false'
        shell: bash
        run: |
          cat << EOF > cran-comments.md
          * This submission was automatically generated by a GitHub Action.
          EOF
          echo "Created default cran-comments.md"

      - name: Submit to CRAN
        id: cran-submit
        shell: bash
        run: |
          # Get package file path
          PKG_FILE="${SUBMISSION_PKG}"

          if [ ! -f "${PKG_FILE}" ]; then
            echo "Error: Package file not found: ${PKG_FILE}"
            echo "submission_status=failed" >> $GITHUB_OUTPUT
            echo "submission_reason=missing_file" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Check if package passes with no warnings or errors
          CHECK_LOG="${{ steps.check.outputs.check_dir }}/00check.log"
          if [ -f "${CHECK_LOG}" ]; then
            STATUS_LINE=$(grep "Status: " "${CHECK_LOG}")
            echo "R CMD check status: ${STATUS_LINE}"

            if [[ "${STATUS_LINE}" == *"ERROR"* ]] || [[ "${STATUS_LINE}" == *"WARNING"* ]]; then
              echo "Package has errors or warnings. Not submitting to CRAN."
              echo "submission_status=failed" >> $GITHUB_OUTPUT
              echo "submission_reason=check_failed" >> $GITHUB_OUTPUT
              exit 1
            fi
          else
            echo "Check log not found at ${CHECK_LOG}"
            echo "Assuming package passed check since this step is running."
          fi

          echo "Submitting package to CRAN..."

          # Pass all collected metadata to the script to avoid re-reading DESCRIPTION
          Rscript .github/scripts/submit_to_cran.R \
            "${PKG_FILE}" \
            "." \
            "${PKGNAME}" \
            "${VERSION}" \
            "${MAINTAINER_NAME}" \
            "${MAINTAINER_EMAIL}"

          # Check if the script was successful
          if [ $? -eq 0 ]; then
            echo "CRAN submission successful!"
            echo "submission_status=success" >> $GITHUB_OUTPUT
          else
            echo "CRAN submission failed"
            echo "submission_status=failed" >> $GITHUB_OUTPUT
            echo "submission_reason=upload_failed" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Create issue content file
        shell: bash
        run: |
          # Obfuscate email for privacy
          EMAIL="${MAINTAINER_EMAIL}"

          # Extract username and domain
          USERNAME=$(echo "$EMAIL" | cut -d@ -f1)
          DOMAIN=$(echo "$EMAIL" | cut -d@ -f2)

          # Get first 2 characters of username and obfuscate the rest
          if [ ${#USERNAME} -le 3 ]; then
            # For very short usernames, just show first character
            VISIBLE_PART="${USERNAME:0:1}"
          else
            # For longer usernames, show first 2 characters
            VISIBLE_PART="${USERNAME:0:2}"
          fi

          # Create obfuscated version
          OBFUSCATED_EMAIL="${VISIBLE_PART}****@${DOMAIN}"

          cat << EOF > issue_content.md
          ## CRAN Submission Status: ${{ steps.cran-submit.outputs.submission_status == 'success' && 'Submitted' || 'Failed' }}

          A CRAN submission for **${{ env.PKGNAME }}** version **${{ env.VERSION }}** has been ${{ steps.cran-submit.outputs.submission_status == 'success' && 'submitted' || 'attempted but failed' }}.

          ### ${{ steps.cran-submit.outputs.submission_status == 'success' && 'Next Steps' || 'Troubleshooting' }}:

          ${{ steps.cran-submit.outputs.submission_status == 'success' && '1. **Check your email**: ' || '- Review the workflow logs: ' }} ${{ steps.cran-submit.outputs.submission_status == 'success' && 'You MUST reply to the confirmation email from CRAN to complete the submission.' || 'Check the GitHub Actions logs for error details.' }}
          ${{ steps.cran-submit.outputs.submission_status == 'success' && '2. **Verify submission**: Check if your package appears at https://CRAN.R-project.org/incoming/' || '- Verify your package passes R CMD check with no warnings or errors.' }}
          ${{ steps.cran-submit.outputs.submission_status == 'success' && '3. **If issues occur**: Contact CRAN administrators at cran-sysadmin@R-project.org' || '- Check your DESCRIPTION file and ensure maintainer information is correct.' }}

          ### Submission details:
          - Package: ${{ env.PKGNAME }}
          - Version: ${{ env.VERSION }}
          - Maintainer: ${{ env.MAINTAINER_NAME }}
          - Email: ${OBFUSCATED_EMAIL}
          - Submission Date: ${{ github.event.release.created_at }}
          - Trigger: Pre-release tagged as "${{ github.event.release.tag_name }}"

          ${{ steps.cran-submit.outputs.submission_status == 'success' && 'Note: You will need to manually handle any feedback from CRAN reviewers.' || 'You can manually submit your package to CRAN once issues are resolved or do a new pre-release.' }}
          EOF

          echo "Created issue content file with obfuscated email"

      - name: Create GitHub Issue
        uses: peter-evans/create-issue-from-file@v5
        with:
          title: "CRAN Submission: ${{ env.PKGNAME }} ${{ env.VERSION }}"
          content-filepath: ./issue_content.md
          labels: "CRAN, submission, ${{ steps.cran-submit.outputs.submission_status == 'success' && 'success' || 'failed' }}"
